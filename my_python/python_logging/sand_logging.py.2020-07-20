#!/usr/bin/env python3

def my_sand_logging():
    import logging

    # Create a custom logger
    logger = logging.getLogger(__name__)

    # Create handlers
    c_handler = logging.StreamHandler()
    c_handler.setLevel(logging.WARNING)

    # Create formatters and add it to handlers
    c_format = logging.Formatter('%(name)s - %(levelname)s - %(message)s')
    c_handler.setFormatter(c_format)

    # Add handlers to the logger
    logger.addHandler(c_handler)

    logger.debug('This is a debug message')
    logger.info('This is an info message')
    logger.warning('This is a warning')
    logger.error('This is an error')
    logger.critical('This is a critical message')

    #debug_format = '%(asctime)s:%(module)s:%(funcName)s:%(lineno)d:%(levelname)s:%(message)s'
    #debug_format = '%(asctime)s:%(module)s:%(funcName)s:%(lineno)d:%(name)s:%(levelname)s:%(message)s'
    #logging.basicConfig(
    #    level=logging.INFO,
    #    format=debug_format,
    #)

    logger.debug('This is a debug message')
    logger.info('This is an info message')
    logging.warning('This is a warning message')
    logging.error('This is an error message')
    logging.critical('This is a critical message')

    # logging variable data
    # “Old-school” String Formatting in Python
    name = 'John'
    #logging.error('%s raised an error', name)

    name = 'Pedro'
    #logging.error(name + 'es un vaina')

    # Python 3's f-Strings
    # https://realpython.com/python-f-strings/
    name = 'Lucy Lou'
    #logging.error(f'{name} raised an error')


my_sand_logging()
