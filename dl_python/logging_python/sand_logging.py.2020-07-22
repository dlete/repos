#!/usr/bin/env python3

def my_sand_logging(debug_level='WARNING'):
    """
    Using a variable while calling logger.setLevel
    https://stackoverflow.com/questions/10332748/using-a-variable-while-calling-logger-setlevel
    """

    import logging

    # Create a custom logger
    logger = logging.getLogger(__name__)
    # need the following line
    # https://docs.python.org/3/howto/logging-cookbook.html#logging-cookbook
    logger.setLevel(logging.DEBUG)

    # Create handlers
    c_handler = logging.StreamHandler()
    c_handler.setLevel(debug_level)
    #c_handler.setLevel(logging.WARNING)
    #my_level = logging.getLevelName(debug_level)
    #c_handler.setLevel(my_level)
    #c_handler.setLevel(logging.INFO)

    #c_handler.setLevel(logging.INFO)   # works; goes on its own
   
    #debug_level = 'INFO'
    #debug_level = 'WARNING'
    #debug_level = debug_level
    #my_level = logging.getLevelName(debug_level)
    #c_handler.setLevel(my_level)


    # Create formatters and add it to handlers
    #c_format = logging.Formatter('%(name)s - %(levelname)s - %(message)s')
    c_format = logging.Formatter('%(asctime)s:%(module)s:%(funcName)s:%(lineno)d:%(name)s:%(levelname)s:%(message)s')
    c_handler.setFormatter(c_format)

    # Add handlers to the logger
    logger.addHandler(c_handler)


    # here starts the normal file
    logger.debug('This is a debug message')
    logger.info('This is an info message')
    logger.warning('This is a warning')
    logger.error('This is an error')
    logger.critical('This is a critical message')

    # Python 3's f-Strings
    # https://realpython.com/python-f-strings/
    name = 'Lucy Lou'
    logger.debug(f'This is a debug log message from {name} using the f-string formating')



def main():
    level = 'DEBUG'
    #level = 'INFO'
    #level = 'WARNING'
    #my_sand_logging(level)
    print('line break')
    my_sand_logging()

if __name__ == '__main__':
    main()
